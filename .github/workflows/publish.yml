name: Build wheels & publish

on:
  push:
    tags: ['v*']            # 推送 vX.Y.Z 标签时发布

permissions:
  contents: read            # 仅需读取源码

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      # 代码检出
      - uses: actions/checkout@v4

      # ---------- 缓存 ----------
      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}

      # cibuildwheel 自身需要一个 Python 解释器
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install build tooling
        run: |
          python -m pip install -U pip
          pip install cibuildwheel build

      # ---------- 构建所有兼容 CPython (自动跳过不符版本) ----------
      - name: Build wheels via cibuildwheel
        run: python -m cibuildwheel --output-dir dist
        env:
          CIBW_SKIP: "pp*"              # 跳过 PyPy
          # 在 manylinux 容器里一次性装 Rust
          CIBW_BEFORE_ALL_LINUX: |
            curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal
          CIBW_ENVIRONMENT_LINUX: "PATH=$HOME/.cargo/bin:$PATH"

      # ---------- 构建 sdist ----------
      - name: Build source distribution
        run: python -m build --sdist --outdir dist

      # 如需调试，可把成品存为工作流产物
      - uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*

      # ---------- 发布到 PyPI ----------
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages_dir: dist
          skip_existing: true           # 同版本重复执行时自动跳过
