name: Build wheels & publish

on:
  push:
    tags: ['v*']             # 仅版本标签触发
  workflow_dispatch:

permissions:
  contents: read

###############################################################################
# 1) wheel jobs : Linux ×1  | macOS-arm64 ×1 | macOS-x86_64 ×1 | Windows ×1
###############################################################################
jobs:
  # ---------- Linux (多架构) ----------
  linux-wheels:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    # 缓存
    - uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: linux-cargo-${{ hashFiles('Cargo.lock') }}
    - uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: linux-pip-${{ hashFiles('pyproject.toml') }}

    # Python & Rust
    - uses: actions/setup-python@v5
      with: { python-version: '3.12' }
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true

    - name: Install tools
      run: |
        python -m pip install -U pip
        pip install "cibuildwheel>=2.20" maturin build

    # QEMU→交叉
    - uses: docker/setup-qemu-action@v3
      with: { platforms: all }

    - name: Build Linux wheels
      run: python -m cibuildwheel --output-dir wheelhouse
      env:
        CIBW_SKIP: "cp313-*"
        CIBW_BUILD: "*manylinux* *musllinux*"
        CIBW_ARCHS_LINUX: "x86_64 i686 aarch64 ppc64le s390x"
        CIBW_BEFORE_ALL_LINUX: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal
        CIBW_ENVIRONMENT_LINUX: "PATH=$HOME/.cargo/bin:$PATH"

    - uses: actions/upload-artifact@v4
      with:
        name: wheels-linux
        path: wheelhouse/*.whl

  # ---------- macOS arm64 ----------
  macos-arm64-wheels:
    runs-on: macos-latest
    env:
      CIBW_ARCHS_MACOS: "arm64"
      CIBW_SKIP: "cp313-*"
    steps:
    - uses: actions/checkout@v4
    - uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: mac-arm-pip-${{ hashFiles('pyproject.toml') }}
    - uses: actions/setup-python@v5
      with: { python-version: '3.12' }
    - name: Install tools
      run: |
        python -m pip install -U pip
        pip install "cibuildwheel>=2.20" maturin build
    - name: Build macOS arm64 wheels
      run: python -m cibuildwheel --output-dir wheelhouse
    - uses: actions/upload-artifact@v4
      with:
        name: wheels-mac-arm64
        path: wheelhouse/*.whl

  # ---------- macOS x86_64 (交叉编译) ----------
  macos-x86-wheels:
    runs-on: macos-latest
    env:
      CIBW_ARCHS_MACOS: "x86_64"
      CIBW_SKIP: "cp313-*"
      # 交叉编译前为 Rust 装好 intel target
      CIBW_BEFORE_ALL_MACOS: |
        rustup target add x86_64-apple-darwin
      CIBW_ENVIRONMENT_MACOS: "PATH=$HOME/.cargo/bin:$PATH"
    steps:
    - uses: actions/checkout@v4
    - uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: mac-x86-pip-${{ hashFiles('pyproject.toml') }}
    - uses: actions/setup-python@v5
      with: { python-version: '3.12' }
    - name: Install tools
      run: |
        python -m pip install -U pip
        pip install "cibuildwheel>=2.20" maturin build
    - name: Build macOS x86_64 wheels
      run: python -m cibuildwheel --output-dir wheelhouse
    - uses: actions/upload-artifact@v4
      with:
        name: wheels-mac-x86_64
        path: wheelhouse/*.whl

  # ---------- Windows ----------
  windows-wheels:
    runs-on: windows-latest
    env:
      CIBW_ARCHS_WINDOWS: "AMD64 x86 ARM64"
      CIBW_SKIP: "cp313-*"
    steps:
    - uses: actions/checkout@v4
    - uses: actions/cache@v4
      with:
        path: ~\AppData\Local\pip\Cache
        key: win-pip-${{ hashFiles('pyproject.toml') }}
    - uses: actions/setup-python@v5
      with: { python-version: '3.12' }
    - name: Install tools
      run: |
        python -m pip install -U pip
        pip install "cibuildwheel>=2.20" maturin build
    - name: Build Windows wheels
      run: python -m cibuildwheel --output-dir wheelhouse
    - uses: actions/upload-artifact@v4
      with:
        name: wheels-windows
        path: wheelhouse\*.whl

###############################################################################
# 2) sdist : 只在 Linux 打一次
###############################################################################
  sdist:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with: { python-version: '3.12' }
    - name: Build sdist
      run: |
        python -m pip install -U build
        python -m build --sdist --outdir dist
    - uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist/*.tar.gz

###############################################################################
# 3) publish : 汇总所有产物 → PyPI
###############################################################################
  publish:
    needs:
      - linux-wheels
      - macos-arm64-wheels
      - macos-x86-wheels
      - windows-wheels
      - sdist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v4
      with:
        pattern: '*'
        merge-multiple: true
    - name: Upload to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages_dir: .
        skip_existing: true
