name: Build wheels & publish to PyPI

on:
  push:
    tags:
      - "v*"                     # 仅版本标签触发

permissions:
  contents: read                 # 只读仓库
  id-token: write                # 若以后想切换 OIDC，可直接用

env:
  # cibuildwheel 自身用哪个 Python 解释器 ─ 不影响产物
  BOOTSTRAP_PY: "3.12"
  CARGO_INCREMENTAL: "0"
  CARGO_NET_RETRY: "10"
  RUSTUP_MAX_RETRIES: "10"

################################################################################
#  1) 生成 sdist (Linux)                                                        #
################################################################################
jobs:
  sdist:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Add 10 GiB swap (avoid OOM)
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 10

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.BOOTSTRAP_PY }}

      - name: Build sdist with maturin
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
          maturin-version: 1.8.3

      - name: Upload sdist artifact
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

################################################################################
#  2) 构建 wheels (6 平台 × 所有稳定 CPython，跳过 3.13)                        #
################################################################################
  wheels:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # -------- Linux --------
          - os: ubuntu-latest
            arch: x86_64
          - os: ubuntu-latest
            arch: aarch64
          # -------- macOS --------
          - os: macos-13          # Intel runner
            arch: x86_64
          - os: macos-15          # Apple Silicon runner
            arch: arm64
          # -------- Windows ------
          - os: windows-latest
            arch: AMD64
          - os: windows-11-arm
            arch: ARM64

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.BOOTSTRAP_PY }}

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install "cibuildwheel>=2.20" maturin

      # Cross-arch QEMU (Linux only)
      - name: Enable QEMU for cross-arch
        if: matrix.os == 'ubuntu-latest'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      # macOS Intel wheel需要交叉编译
      - name: Add Rust x86_64 target (macOS-Intel)
        if: matrix.os == 'macos-13'
        run: rustup target add x86_64-apple-darwin

      - name: Build wheels via cibuildwheel
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          # 跳过 CPython 3.13
          CIBW_SKIP: "cp313-*"

          # 仅构建当前矩阵所需架构
          CIBW_ARCHS: ${{ matrix.arch }}

          # manylinux 镜像：aarch64 / x86_64 固定 2_24
          CIBW_MANYLINUX_AARCH64_IMAGE: "manylinux_2_24"
          CIBW_MANYLINUX_X86_64_IMAGE: "manylinux_2_24"

          # 在 manylinux 容器里安装 Rust toolchain
          CIBW_BEFORE_ALL_LINUX: |
            curl -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal
          CIBW_ENVIRONMENT_LINUX: "PATH=$HOME/.cargo/bin:$PATH"

          # macOS 也把 cargo bin 加入 PATH
          CIBW_ENVIRONMENT_MACOS: "PATH=$HOME/.cargo/bin:$PATH"

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.arch }}
          path: wheelhouse/*.whl

################################################################################
#  3) 上传 PyPI                                                                 #
################################################################################
  publish:
    needs: [sdist, wheels]
    runs-on: ubuntu-latest

    steps:
      - name: Download all wheels & sdist
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages_dir: dist
          skip_existing: true
